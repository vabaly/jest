// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matcher error toMatchInlineSnapshot Expected properties must be an object (non-null) without snapshot 1`] = `
expect(received).toMatchInlineSnapshot(properties)

Matcher error: Expected properties must be an object

Expected properties has type:  boolean
Expected properties has value: false
`;

exports[`matcher error toMatchInlineSnapshot Expected properties must be an object (null) with snapshot 1`] = `
expect(received).toMatchInlineSnapshot(properties, snapshot)

Matcher error: Expected properties must be an object

Expected properties has value: null
`;

exports[`matcher error toMatchInlineSnapshot Inline snapshot must be a string 1`] = `
expect(received).resolves.toMatchInlineSnapshot(properties, snapshot)

Matcher error: Inline snapshot must be a string

Inline snapshot has type:  symbol
Inline snapshot has value: Symbol(is not a string)
`;

exports[`matcher error toMatchInlineSnapshot Snapshot matchers cannot be used with not 1`] = `
expect(received).not.toMatchInlineSnapshot(snapshot)

Matcher error: Snapshot matchers cannot be used with not
`;

exports[`matcher error toMatchSnapshot Expected properties must be an object (non-null) 1`] = `
expect(received).toMatchSnapshot(properties)

Matcher error: Expected properties must be an object

Expected properties has type:  function
Expected properties has value: [Function]
`;

exports[`matcher error toMatchSnapshot Expected properties must be an object (null) with hint 1`] = `
expect(received).toMatchSnapshot(properties, hint)

Matcher error: Expected properties must be an object

Expected properties has value: null

To provide a hint without properties: toMatchSnapshot('hint')
`;

exports[`matcher error toMatchSnapshot Expected properties must be an object (null) without hint 1`] = `
expect(received).toMatchSnapshot(properties)

Matcher error: Expected properties must be an object

Expected properties has value: null
`;

exports[`matcher error toMatchSnapshot Snapshot state must be initialized 1`] = `
expect(received).resolves.toMatchSnapshot(hint)

Snapshot state must be initialized

Snapshot state has value: undefined
`;

exports[`matcher error toMatchSnapshot received value must be an object (non-null) 1`] = `
expect(received).toMatchSnapshot(properties)

Matcher error: received value must be an object when the matcher has properties

Received has type:  string
Received has value: "string"
`;

exports[`matcher error toMatchSnapshot received value must be an object (null) 1`] = `
expect(received).toMatchSnapshot(properties)

Matcher error: received value must be an object when the matcher has properties

Received has value: null
`;

exports[`matcher error toThrowErrorMatchingInlineSnapshot Inline snapshot must be a string 1`] = `
expect(received).toThrowErrorMatchingInlineSnapshot(snapshot)

Matcher error: Inline snapshot must be a string

Inline snapshot has type:  number
Inline snapshot has value: 404
`;

exports[`matcher error toThrowErrorMatchingInlineSnapshot Snapshot state must be initialized 1`] = `
expect(received).rejects.toThrowErrorMatchingInlineSnapshot(snapshot)

Snapshot state must be initialized

Snapshot state has value: undefined
`;

exports[`matcher error toThrowErrorMatchingSnapshot Received value must be a function 1`] = `
expect(received).toThrowErrorMatchingSnapshot()

Matcher error: received value must be a function

Received has type:  number
Received has value: 13
`;

exports[`matcher error toThrowErrorMatchingSnapshot Snapshot matchers cannot be used with not 1`] = `
expect(received).not.toThrowErrorMatchingSnapshot(hint)

Matcher error: Snapshot matchers cannot be used with not
`;

exports[`other error toThrowErrorMatchingSnapshot Received function did not throw 1`] = `
expect(received).toThrowErrorMatchingSnapshot()

Received function did not throw
`;

exports[`pass false toMatchInlineSnapshot with properties equals false with snapshot 1`] = `
expect(received).toMatchInlineSnapshot(properties, snapshot)

Snapshot name: \`with properties 1\`

- Expected properties  - 1
+ Received value       + 1

  Object {
-   "id": "abcdef",
+   "id": "abcdefg",
  }
`;

exports[`pass false toMatchInlineSnapshot with properties equals false without snapshot 1`] = `
expect(received).toMatchInlineSnapshot(properties)

Snapshot name: \`with properties 1\`

- Expected properties  - 1
+ Received value       + 1

  Object {
-   "id": "abcdef",
+   "id": "abcdefg",
  }
`;

exports[`pass false toMatchInlineSnapshot with properties equals true 1`] = `
expect(received).toMatchInlineSnapshot(properties, snapshot)

Snapshot name: \`with properties 1\`

- Snapshot  - 1
+ Received  + 1

  Object {
    "id": "abcdef",
-   "text": "inline snapshot",
+   "text": "received",
    "type": "ADD_ITEM",
  }
`;

exports[`pass false toMatchSnapshot New snapshot was not written (multi line) 1`] = `
expect(received).toMatchSnapshot(hint)

Snapshot name: \`New snapshot was not written: (CI) 1\`

New snapshot was not written. The update flag must be explicitly passed to write a new snapshot.

This is likely because this test is run in a continuous integration (CI) environment in which snapshots are not written by default.

Received:
"To write or not to write,
that is the question."
`;

exports[`pass false toMatchSnapshot New snapshot was not written (single line) 1`] = `
expect(received).toMatchSnapshot(hint)

Snapshot name: \`New snapshot was not written: (CI) 2\`

New snapshot was not written. The update flag must be explicitly passed to write a new snapshot.

This is likely because this test is run in a continuous integration (CI) environment in which snapshots are not written by default.

Received: "Write me if you can!"
`;

exports[`pass false toMatchSnapshot with properties equals false isLineDiffable false 1`] = `
expect(received).toMatchSnapshot(properties)

Snapshot name: \`with properties 1\`

Expected properties: {"name": "Error"}
Received value:      [RangeError: Invalid array length]
`;

exports[`pass false toMatchSnapshot with properties equals false isLineDiffable true 1`] = `
expect(received).toMatchSnapshot(properties)

Snapshot name: \`with properties 1\`

- Expected properties  - 1
+ Received value       + 1

  Object {
-   "id": "abcdef",
+   "id": "abcdefg",
  }
`;

exports[`pass false toMatchSnapshot with properties equals true 1`] = `
expect(received).toMatchSnapshot(properties, hint)

Snapshot name: \`with properties: change text value 1\`

- Snapshot  - 1
+ Received  + 1

  Object {
    "id": "abcdef",
-   "text": "snapshot",
+   "text": "received",
    "type": "ADD_ITEM",
  }
`;

exports[`pass false toThrowErrorMatchingInlineSnapshot with snapshot 1`] = `
expect(received).toThrowErrorMatchingInlineSnapshot(snapshot)

Snapshot name: \`with snapshot 1\`

Snapshot: "inline snapshot"
Received: "received"
`;

exports[`printPropertiesAndReceived omit missing properties 1`] = `
- Expected properties  - 2
+ Received value       + 1

  Object {
-   "hash": Any<String>,
-   "path": Any<String>,
+   "path": "…",
  }
`;

exports[`printSnapshotAndReceived backtick single line expected and received 1`] = `
Snapshot: "var foo = \`backtick\`;"
Received: "var foo = tag\`backtick\`;"
`;

exports[`printSnapshotAndReceived empty string expected and received single line 1`] = `
Snapshot: ""
Received: "single line string"
`;

exports[`printSnapshotAndReceived empty string received and expected multi line 1`] = `
- Snapshot  - 3
+ Received  + 0

- multi
- line
- string
`;

exports[`printSnapshotAndReceived escape backslash in multi line string 1`] = `
- Snapshot  - 1
+ Received  + 2

- Forward / slash and back \\ slash
+ Forward / slash
+ Back \\ slash
`;

exports[`printSnapshotAndReceived escape backslash in single line string 1`] = `
Snapshot: "forward / slash and back \\\\ slash"
Received: "Forward / slash and back \\\\ slash"
`;

exports[`printSnapshotAndReceived escape double quote marks in string 1`] = `
Snapshot: "What does \\"oobleck\\" mean?"
Received: "What does \\"ewbleck\\" mean?"
`;

exports[`printSnapshotAndReceived escape regexp 1`] = `
Snapshot: /\\\\\\\\\\("\\)/g
Received: /\\\\\\\\\\("\\)/
`;

exports[`printSnapshotAndReceived expand false 1`] = `
- Snapshot  - 1
+ Received  + 3

@@ -12,7 +12,9 @@
  ? "number"
  : T extends boolean
  ? "boolean"
  : T extends undefined
  ? "undefined"
- : T extends Function ? "function" : "object";
+ : T extends Function
+ ? "function"
+ : "object";
  ↵
`;

exports[`printSnapshotAndReceived expand true 1`] = `
- Snapshot  - 1
+ Received  + 3

  type TypeName<T> =
  T extends string ? "string" :
  T extends number ? "number" :
  T extends boolean ? "boolean" :
  T extends undefined ? "undefined" :
  T extends Function ? "function" :
  "object";
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  type TypeName<T> = T extends string
  ? "string"
  : T extends number
  ? "number"
  : T extends boolean
  ? "boolean"
  : T extends undefined
  ? "undefined"
- : T extends Function ? "function" : "object";
+ : T extends Function
+ ? "function"
+ : "object";
  ↵
`;

exports[`printSnapshotAndReceived fallback to line diff 1`] = `
- Snapshot  - 1
+ Received  + 8

+ ====================================options=====================================
+ parsers: ["flow", "typescript"]
+ printWidth: 80
+                                                                                 | printWidth
+ =====================================input======================================
  [...a, ...b,];
  [...a, ...b];
- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+ =====================================output=====================================
  [...a, ...b];
  [...a, ...b];

+ ================================================================================
`;

exports[`printSnapshotAndReceived has no common after clean up chaff array 1`] = `
- Snapshot  - 2
+ Received  + 2

  Array [
-   "delete",
-   "two",
+   "insert",
+   "2",
  ]
`;

exports[`printSnapshotAndReceived has no common after clean up chaff string single line 1`] = `
Snapshot: "delete"
Received: "insert"
`;

exports[`printSnapshotAndReceived ignore indentation markup delete 1`] = `
- Snapshot  - 2
+ Received  + 0

  <div>
-   <div>
    <h3>
      Ignore indentation for most serialized objects
    </h3>
    <p>
      Call 
      <code>
        diffLinesUnified2
      </code>
       to compare without indentation
    </p>
-   </div>
  </div>
`;

exports[`printSnapshotAndReceived ignore indentation markup fall back 1`] = `
- Snapshot  - 5
+ Received  + 7

- <pre
-   className="language-js"
- >
-   for (key in foo) {
+ <div>
+   <pre
+     className="language-js"
+   >
+     for (key in foo) {
    if (Object.prototype.hasOwnProperty.call(foo, key)) {
      doSomething(key);
    }
  }
- </pre>
+   </pre>
+ </div>
`;

exports[`printSnapshotAndReceived ignore indentation markup insert 1`] = `
- Snapshot  - 0
+ Received  + 7

  <th>
+   <span>
      when
+   </span>
+   <abbr
+     title="ascending from older to newer"
+   >
+     ↓
+   </abbr>
  </th>
`;

exports[`printSnapshotAndReceived ignore indentation object delete 1`] = `
- Snapshot  - 2
+ Received  + 0

  Object {
-   "payload": Object {
    "text": "Ignore indentation in snapshot",
    "time": "2019-11-11",
-   },
    "type": "CREATE_ITEM",
  }
`;

exports[`printSnapshotAndReceived ignore indentation object insert 1`] = `
- Snapshot  - 0
+ Received  + 2

  Object {
+   "payload": Object {
      "text": "Ignore indentation in snapshot",
      "time": "2019-11-11",
+   },
    "type": "CREATE_ITEM",
  }
`;

exports[`printSnapshotAndReceived isLineDiffable false asymmetric matcher 1`] = `
Snapshot: null
Received: Object {
  "asymmetricMatch": [Function],
}
`;

exports[`printSnapshotAndReceived isLineDiffable false boolean 1`] = `
Snapshot: true
Received: false
`;

exports[`printSnapshotAndReceived isLineDiffable false date 1`] = `
Snapshot: 2019-09-19T00:00:00.000Z
Received: 2019-09-20T00:00:00.000Z
`;

exports[`printSnapshotAndReceived isLineDiffable false error 1`] = `
Snapshot: [Error: Cannot spread fragment "NameAndAppearances" within itself.]
Received: [Error: Cannot spread fragment "NameAndAppearancesAndFriends" within itself.]
`;

exports[`printSnapshotAndReceived isLineDiffable false function 1`] = `
Snapshot: undefined
Received: [Function]
`;

exports[`printSnapshotAndReceived isLineDiffable false number 1`] = `
Snapshot: -0
Received: NaN
`;

exports[`printSnapshotAndReceived isLineDiffable true array 1`] = `
- Snapshot  - 0
+ Received  + 2

  Array [
    Object {
+     "_id": "b14680dec683e744ada1f2fe08614086",
      "code": 4011,
      "weight": 2.13,
    },
    Object {
+     "_id": "7fc63ff01769c4fa7d9279e97e307829",
      "code": 4019,
      "count": 4,
    },
  ]
`;

exports[`printSnapshotAndReceived isLineDiffable true object 1`] = `
- Snapshot  - 2
+ Received  + 3

  Object {
    "props": Object {
-     "className": "logo",
-     "src": "/img/jest.png",
+     "alt": "Jest logo",
+     "class": "logo",
+     "src": "/img/jest.svg",
    },
    "type": "img",
  }
`;

exports[`printSnapshotAndReceived isLineDiffable true single line expected and multi line received 1`] = `
- Snapshot  - 1
+ Received  + 3

- Array []
+ Array [
+   0,
+ ]
`;

exports[`printSnapshotAndReceived isLineDiffable true single line expected and received 1`] = `
- Snapshot  - 1
+ Received  + 1

- Array []
+ Object {}
`;

exports[`printSnapshotAndReceived multi line small change in one line and other is unchanged 1`] = `
- Snapshot  - 1
+ Received  + 1

- There is no route defined for key 'Settings'.
+ There is no route defined for key Settings.
  Must be one of: 'Home'
`;

exports[`printSnapshotAndReceived multi line small changes 1`] = `
- Snapshot  - 7
+ Received  + 7

-     69 | 
+     68 | 
-     70 | test('assert.doesNotThrow', () => {
+     69 | test('assert.doesNotThrow', () => {
-   > 71 |   assert.doesNotThrow(() => {
+   > 70 |   assert.doesNotThrow(() => {
         |          ^
-     72 |     throw Error('err!');
+     71 |     throw Error('err!');
-     73 |   });
+     72 |   });
-     74 | });
+     73 | });
-     at Object.doesNotThrow (__tests__/assertionError.test.js:71:10)
+     at Object.doesNotThrow (__tests__/assertionError.test.js:70:10)
`;

exports[`printSnapshotAndReceived single line large changes 1`] = `
Snapshot: "Array length must be a finite positive integer"
Received: "Invalid array length"
`;

exports[`printSnapshotAndReceived without serialize backtick single line expected and multi line received 1`] = `
- Snapshot  - 1
+ Received  + 2

- var foo = \`backtick\`;
+ var foo = \`back
+ tick\`;
`;

exports[`printSnapshotAndReceived without serialize backtick single line expected and received 1`] = `
- Snapshot  - 1
+ Received  + 1

- var foo = \`backtick\`;
+ var foo = \`back\${x}tick\`;
`;

exports[`printSnapshotAndReceived without serialize has no common after clean up chaff multi line 1`] = `
- Snapshot  - 2
+ Received  + 2

- delete
- two
+ insert
+ 2
`;

exports[`printSnapshotAndReceived without serialize has no common after clean up chaff single line 1`] = `
- Snapshot  - 1
+ Received  + 1

- delete
+ insert
`;

exports[`printSnapshotAndReceived without serialize prettier/pull/5590 1`] = `
- Snapshot  - 1
+ Received  + 1

@@ -4,8 +4,8 @@
                                                                                  | printWidth
  =====================================input======================================
  <img src="test.png" alt='John "ShotGun" Nelson'>

  =====================================output=====================================
- <img src="test.png" alt="John &quot;ShotGun&quot; Nelson" />
+ <img src="test.png" alt='John "ShotGun" Nelson' />

  ================================================================================
`;
