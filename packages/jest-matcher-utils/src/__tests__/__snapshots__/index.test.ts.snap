// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ensureNoExpected() throws error when expected is not undefined with matcherName 1`] = `
expect(received)[.not].toBeDefined()

Matcher error: this matcher must not have an expected argument

Expected has type:  object
Expected has value: {"a": 1}
`;

exports[`ensureNoExpected() throws error when expected is not undefined with matcherName and options 1`] = `
expect(received).not.toBeDefined()

Matcher error: this matcher must not have an expected argument

Expected has type:  object
Expected has value: {"a": 1}
`;

exports[`ensureNumbers() throws error when expected is not a number (backward compatibility) 1`] = `
expect(received)[.not].toBeCloseTo(expected)

Matcher error: expected value must be a number or bigint

Expected has type:  string
Expected has value: "not_a_number"
`;

exports[`ensureNumbers() throws error when received is not a number (backward compatibility) 1`] = `
expect(received)[.not].toBeCloseTo(expected)

Matcher error: received value must be a number or bigint

Received has type:  string
Received has value: "not_a_number"
`;

exports[`ensureNumbers() with options promise empty isNot false received 1`] = `
expect(received).toBeCloseTo(expected, precision)

Matcher error: received value must be a number or bigint

Received has type:  string
Received has value: ""
`;

exports[`ensureNumbers() with options promise empty isNot true expected 1`] = `
expect(received).not.toBeCloseTo(expected)

Matcher error: expected value must be a number or bigint

Expected has value: undefined
`;

exports[`ensureNumbers() with options promise rejects isNot false expected 1`] = `
expect(received).rejects.toBeCloseTo(expected)

Matcher error: expected value must be a number or bigint

Expected has type:  string
Expected has value: "0"
`;

exports[`ensureNumbers() with options promise rejects isNot true received 1`] = `
expect(received).rejects.not.toBeCloseTo(expected)

Matcher error: received value must be a number or bigint

Received has type:  symbol
Received has value: Symbol(0.1)
`;

exports[`ensureNumbers() with options promise resolves isNot false received 1`] = `
expect(received).resolves.toBeCloseTo(expected)

Matcher error: received value must be a number or bigint

Received has type:  boolean
Received has value: false
`;

exports[`ensureNumbers() with options promise resolves isNot true expected 1`] = `
expect(received).resolves.not.toBeCloseTo(expected)

Matcher error: expected value must be a number or bigint

Expected has value: null
`;

exports[`stringify() toJSON errors when comparing two objects 1`] = `
expect(received).toEqual(expected) // deep equality

- Expected  - 1
+ Received  + 1

  Object {
-   "b": 1,
+   "a": 1,
    "toJSON": [Function toJSON],
  }
`;
